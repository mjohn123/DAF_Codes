#ifndef DELAYDEC_H_
#define DELAYDEC_H_

#include <cstdlib>
#include <cstdio>
#include <cstring>
//#include "Utilities.h"
//#include "FiniteField.h"

#include "BatchDec.h"
#include "platform.h"
#include <algorithm>
#include <vector>

#include "InactDecoder.h"
#include "Partition.h"

#include "VariableNode.h"
#include "CheckNode.h"

#include "DecPacketBuilder.h"

#include <cassert>

using namespace std;


class DelayDecoder : public BatsDecoder{
private:

    
public:
DelayDecoder(int M, int K, int T, SymbolType *output): BatsBasic(M,K,T){

	    complete_flag = 0;
        setOutputPacket(output);
        // Sparse Matrix Decoding
        nloss1 = 0;
        nloss2 = 0;
        nloss3 = 0;
        
        nRecPkg = 0;
        nSavedPkg = 0;
        nRecBatch = ldpcNum;
        nDecoded = 0;
        nDecodedPkg = 0;

        decQueue = new ArrayQueue<CheckNode*>(BATSDECODER_MAXBATCH);
             
        // maximum allowed number of inactive variables
        // maxInact = 4*sqrt(packetNum);
        maxInact = max(hdpcNum + additionalPerminactNum, 100);
		//maxInact = 12;//test
        
        d_log("BatsDecoder: maxInact = %d\n", maxInact);
        //receiRedun = 0.05*packetNum;
	receiRedun = 0.02*packetNum;
	step_for_packets = 0.001*packetNum;
	accumulate_packets = 0;
	num_inact = 0;

        // inactRedun = maxInact/10;
        // inactRedun = (inactRedun > 8)? inactRedun:8;
		
        // initial variable nodes
		VariableNode::SetBuffer(totalNum, maxInact);
        int idx = 0;
        for(int i = 0; i<totalNum; i++) {
            if (layout->inPerminactPart(i)) {
				var.push_back(VariableNode(i, buf->GetPacket(i), idx));
                idx++;
            } else {
				var.push_back(VariableNode(i, buf->GetPacket(i)));
			}
        }
        // init batchSet
        for(int i=ldpcNum;i<BATSDECODER_MAXBATCH;i++){
            batchSet[i] = NULL;
        }
                
        // init temp variables
        GH = mallocMat<SymbolType>(batchSize,batchSize);
        invMat = mallocMat<SymbolType>(batchSize,batchSize);
        
		//Init InactDecoder
		inactDecoder = new InactDecoder(*precode, hdpcNum + additionalPerminactNum, maxInact, hdpcNum, packetSize);
		//init decoder side packet builder
		packBuilder = new DecPacketBuilder(var, builder->GetRand(), batchSize);
		//Hook up
		builder->SetPacketBuilder(packBuilder);
		
        // LDPC parameters init
		int dataActive = packetNum - additionalPerminactNum;
        if (ldpcNum > 0) {    
            int ldpcBlockNum = dataActive / ldpcNum;           
            int ldpcMaxCheckDeg = ldpcVarDegree * (ldpcBlockNum + 1) + 1 + 2; // including pi part
            
            for(int i = 0; i<ldpcNum; i++){
                batchSet[i] = new CheckNode(i, 1, packetSize, maxInact);//id = i
                CheckNode* it = batchSet[i];
                it->codingVec[0][0] = 1;
                it->codingRank = 1;
                it->numRec++;
                memset(it->packet[0], 0, packetSize);
            }

            int nb, nc, nd;
            for (int i = 0; i < dataActive; i++) {
                nb = i / ldpcNum;
                nc = i % ldpcNum;
                for (int j = 0; j < ldpcVarDegree; j++) {
                    nd = (nc + j * nb + j) % ldpcNum;
                    BEdge* newEdge = batchSet[nd]->addEdge(&(var[i]), 1); 
                    newEdge->g[0] = 1;
                    newEdge->gh[0] = 1;
                }
            }
            for (int i = 0; i < ldpcNum; i++) {
                BEdge* newEdge = batchSet[i]->addEdge(&(var[i+packetNum]), 1);
                newEdge->g[0] = 1;
                newEdge->gh[0] = 1;
            }
            // add inactive edges in the end
            for (int j = 0; j < ldpcNum; j++) {
                for (int i = 0; i < 2; i++) {
                    int k = layout->PerminactToActual((j + i) % (hdpcNum + additionalPerminactNum));
                    BEdge* newEdge = batchSet[j]->addEdge(&(var[k]), 1);
                    newEdge->g[0] = 1;
                    newEdge->gh[0] = 1;
                    batchSet[j]->inactCoef[0][var[k].inactSeq] = 1;
                }
            }            
        }
    }

    ~DelayDecoder(){
        for(int i=0;i<BATSDECODER_MAXBATCH;i++){
            if(batchSet[i] != NULL)
                delete batchSet[i];
        }

        freeMat(GH,batchSize);
        freeMat(invMat,batchSize);
		
		VariableNode::FreeBuffer();

        delete decQueue;
		delete packBuilder;
    }

    void setOutputPacket(SymbolType *output){
		buf->SetBuffer(output);
    }

    inline int complete(double decRatio){
	    //return (nDecodedPkg>=packetNum * decRatio);
	    return complete_flag;
    }

    void rankDist(double* rd);
    void logRankDist();
	//Number of times inactivation decoding is triggered
    int numInact() {
	    return num_inact;
    }
    void receivePacket(SymbolType *packet);

    bool inactDecoding(){
        bool result;
		d_log("inactDecoding: nRecPkg = %d, loss(decoded) = %d, loss(dependant) = %d\n", nRecPkg, nloss1, nloss2);

        result = inactDec();
		
		//if inactDecoding fail, we consider it needs more packets and retry inactDecoding again
        complete_flag = result;

		/* prepare for the next run */
		accumulate_packets = 0;
		return result;        
    }

    bool readyForInact() {
		/*
        	bool re = (nSavedPkg >= packetNum + receiRedun);
        	if (re)
			d_log("Inactivation Decoding ready");
		*/

	    if ((nSavedPkg >= packetNum + receiRedun) &&
		(accumulate_packets >= step_for_packets)) {
		    //cout << "accumulate_packets = " << accumulate_packets << endl;
            num_inact++;
		    return true;
	    }
	    else {
		    return false;
	    }
    }

    int getDecodedPkg(){
        int n = 0;
        for(int j = 0; j < packetNum; j++){
            if(var[j].decoded){
                n++;
            }
        }
        return n;
    }
private: 
    CheckNode* initNewBatch(KeyType);
    void tryPushDecQueue(CheckNode*);
    void decodeBatch();
    bool addInact();
    bool inactDec();
};





#endif /* DELAYDEC_H_ */

